https://wikidocs.net/17145

https://louanna97.tistory.com/58

# 생성자와 소멸자의 차이

- 생성자: 탄생, 여러개를 만들 수 있음.
- 소멸자: 끝, 하나만 만들 수 있음.

# 생성자

- 클래스의 객체 생성 시에 private 멤버를 자동으로 초기화함
- 생성자의 이름은 클래스의 이름과 같아야 함.
- 반환형이 선언되어 있지 않고 실제로도 반환하지 않음.
- 객체 생성시에 딱 한번 호출됨.
- 생성자도 일종의 함수이므로 오버로딩이 가능함.
    - 즉, 객체 생성을 다양하게 할 수 있음.
- 생성자도 디폴트 값을 설정할 수 있음.

# 예제1: 다양한 생성자

```cpp
#include <iostream>
using namespace std;

class SimpleClass
{
private:
int num1;
int num2;
public:
SimpleClass()  // 생성자 1
{
num1 = 0;
num2 = 0;
}
SimpleClass(int n)  // 생성자 2
{
num1 = n;
num2 = 0;
}
SimpleClass(int n1, int n2)  // 생성자 3
{
num1 = n1;
num2 = n2;
}

```
void Show() const
{
    cout << num1 << ' ' << num2 << endl;
}

```

};

int main(void)
{
SimpleClass sc1;  // 생성자 1 호출. SimpleClass sc1()은 에러 발생하므로 주의
sc1.Show();

```
SimpleClass sc2(100);  // 생성자 2 호출
sc2.Show();

SimpleClass sc3(100,200);  // 생성자 3 호출
sc3.Show();

system("pause");  // VC++ 에서만 사용

return 0;

```

}
```

![image.png](attachment:775467b4-eb2c-43d0-8d72-c275b0db0087:image.png)

# 예제2: 생성자 매개변수 디폴트 값

```cpp
#include <iostream>
using namespace std;

class SimpleClass
{
private:
    int num1;
    int num2;
public:
    SimpleClass(int n1 = 0, int n2 = 0)  // 생성자 4
    {
        num1 = n1;
        num2 = n2;
    }

    void Show() const
    {
        cout << num1 << ' ' << num2 << endl;
    }

};

int main(void)
{
    SimpleClass sc1;  // 생성자 4 호출. 디폴트 값 사용
    sc1.Show();

    SimpleClass sc2(100);  // 생성자 4 호출, 첫 멤버 값 세팅
    sc2.Show();

    SimpleClass sc3(100,200);  // 생성자 4 호출, 두 멤버 모두의 값 세팅
    sc3.Show();

    system("pause");  // VC++ 에서만 사용

    return 0;
}

```

![image.png](attachment:94142570-3074-4a67-a7e9-aaf29e01e67d:image.png)

# 예제3: 생성자가 모호하면 컴파일 에러

```cpp
#include <iostream>
using namespace std;

class SimpleClass
{
private:
    int num1;
    int num2;
public:
    SimpleClass()  // 생성자 1
    {
        num1 = 0;
        num2 = 0;
    }
    SimpleClass(int n)  // 생성자 2
    {
        num1 = n;
        num2 = 0;
    }
    SimpleClass(int n1, int n2)  // 생성자 3
    {
        num1 = n1;
        num2 = n2;
    }
    SimpleClass(int n1 = 0, int n2 = 0)  // 생성자 4
    {
        num1 = n1;
        num2 = n2;
    }

    void Show() const
    {
        cout << num1 << ' ' << num2 << endl;
    }

};

int main(void)
{
    SimpleClass sc1;  // 생성자 1 호출. SimpleClass sc1()은 에러 발생하므로 주의
    sc1.Show();

    SimpleClass sc2(100);  // 생성자 2 호출? 생성자 4 호출?
    sc2.Show();

    SimpleClass sc3(100, 200);  // 생성자 3 호출? 생성자 4 호출?
    sc3.Show();

    system("pause");  // VC++ 에서만 사용

    return 0;
}

```

![image.png](attachment:a98e9be3-c995-46f8-8b00-6d42ae3db38e:image.png)

# 예제: 기본 생성자와 암시적 생성자

```cpp
class Knight
{
public:
	Knight()
	{
		cout << "Knight() 기본 생성자 호출" << endl;
		_hp = 100;
		_attack = 10;
		_posY = 0;
		_posX = 0;
	}
}

int main()
{
		Knight k1;
	
	return 0;
}
```

클래스 내부에 생성자를 명시적으로 만들지 않으면, 컴파일러가 기본 생성자를 자동으로 만듦.

```cpp
int main()
{
	Knight k1;
	k1._hp = 100;
	k1._attack = 10;
	k1._posY = 0;
	k1._posX = 0;
	
	return 0;
}	
```

이때 해당 객체에는 데이터를 초기화하지 않았기 때문에 따로 초기화해야 함.
